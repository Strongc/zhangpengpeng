设计模式
确定变的和不变的，把不变的模式化。
低耦合（Coupling），高内聚（Cohesion）。
运用联想，把一个行业的问题，类似成另一个行业的情形，再据此设计模式。
设计模式是OO的一些设计思想的一个总结（但不是全部）。
多把一些抽象的东西封装成类，比如状态、通讯、交互等。
 
1，用一个类的具体子类去创建具体需要的类，可以根据具体参数创建具体需要的类（根据相同属性进行归类），或者根据具体参数创建具体需要的类的各个子部分，最后组装成完整的需求类（组合的算法一致）。
2，用XXX::Instance()提供全局实例，并保证一个，按需创建。
3，提供自我复制的能力。
4，把处理逻辑和具体实现分离，具体实现部分可以根据运行环境（OS）具体实现。
5，通过代理，把一部分功能转由第三方模块实现。
7，一个类的很多个不同的处理实例，可以通过key来标识，相同的实例用相同的key，尽量重用。
8，在父类中把处理逻辑定好（框架搭好），在子类中实现具体的子功能（添砖加瓦）。
9，把一些类/函数（小功能）组装起来，提供“一条龙”服务（大功能）。
10，甚至像状态这样抽象的概念，都可以封装成类，每个“状态”进行了什么操作，可以变成另一种“状态”；也可以用类来记录一个整体的一个状态。
11，把更新发给订阅者，数据和展示相分离。
12，提供一个专门处理对象间交互和通信的类，各个对象不必显势去声明和引用。
13，将可能处理一个请求的对象链接成一个链，并将请求在这个链上传递，直到有对象处理该请求。
14，通过iterater把继承于一个基类的列表类的遍历统一。
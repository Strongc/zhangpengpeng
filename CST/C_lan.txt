编程是一门艺术。任何人都可以享受编程。

C语言体现了“小即是美”。函数应该简短而漂亮，做一件事并且做好它。 Unix/Linux下的优秀软件亦是如此。


C是很小的内核语言，包含极少的硬件相关元素，
使用标准C链接库(library)进行扩充。
指针是C的特色。
三种基本结构：顺序结构，选择结构，循环结构。

C的面向对象
c++: type class.process(args);
c:     type process(class, args); /* type classProcess(class, args);  内部的记得用static*/
书写形式不同，表达能力一样。


C的数据类型
整形 int  实型 float  字符 char
数组 []  结构体struct  联合 union  枚举 enum
指针 *  空 void

enum , const , #define
只是声明单一固定值，尽可能采用const
如果是一组固定值，并且相互关联，则采用enum
不涉及条件编译，只是定义固定值的情况下，尽可能不用#define


keywords:
auto, break, case, char, const, continue, default, do, double, else, enum, extern, float, for, goto, if, int, long, register, return, short, signed, sizeof, static, struct, switch, typedef, union, unsigned, void, while;

整形变量：八进制以0开头，如012，十六进制以0x开头，如0x12;
实型变量：0.123, .123, 123.0, 123e3, 123E3;
转义字符：'\n', '\t', '\\', '\b', '\'', '\"', '\ddd', '\xhh'

逗号（,）在C语言中被看做运算符，其作用是：将两个或两个以上的表达式组成复合表达式。其运算规则为：从左到右逐一计算表达式，把最后一个表达式的值作为复合表达式的值。逗号在所有运算符中优先级最低。
如： a=3+6,b=a+1,a+b; 且 c=(a=3+6,b=a+1,a+b);则c为19
    char ch=(a=3+6,b=a+1,a+b,'a'); 'a';也合法
    i=1,2; 实际为 (i=1),2 而不是 i=(1,2) 。

算术运算符的优先级 高于 关系运算符 高于 赋值运算符
关系表达式的值 0，1 。
逻辑运算符优先级 ! > && > ||
<condition> ? Ystm : Nstm;
switch中放integeral type ：char, long, int, short, enum;
break终止循环语句和跳出switch语句
continue对for和while，跳过下面的，直接回顶。
不应用goto语句    loop: if (n <= 200) {
                             n++;  //or other ops
			     goto loop;
			}

int a[] = {2,4,6,8} 而 int a[5] = {1,2,3};后两个均为0;
char s[] = {"abcd"} 等价于 char s[] = "abcd" 等价于 char *s = "abcd";
按Ctrl+Z , EOF, End of File, -1, 定义在stdio.h

C在调用函数时，将实际参数的值传递给形式参数。单向传值的关系。
变量 先定义 后使用；  函数 先声明/定义（实现） 后调用。

变量存储的类别：静态存贮，在程序的运行期间分配固定的存储空间；动态存贮，在程序运行期间根据需要分配存贮空间。
静态存贮区：1,外部定义的全部变量；2,内部定义的静态变量（static int f=1）。
动态存贮区：1,形参；2,自动局部变量(auto一般都省)；3,函数调用时的现场保护和返回地址。

外部变量（全局变量）：1,一般外部变量（静态存贮）；2,外部静态变量（加static，只能在该文件中使用）；3,用extern扩展外部变量作用域（同一文件，定义之前，先extern，就可以用了；不同文件，extern一下，就可用）。
func()
{
	extern int i;	//extern 一下，相当于声明
	i=....;
}
int i;

函数原型： 函数类型 函数名(参数列表);
内部函数，加static，只能本文件中使用 static funType funName(){};
外部函数，C中函数缺省都是外部函数，在需要调用的文件中，用extern+函数原型声明（extern一般省）。

#define macro_identifier <token_sequence> 原样替换，没分号结束（因为不是C语句）
宏名有效范围，从定义到文件结束，需提前结束可用#undef 宏名
可以用已知宏名做层层替换
     #define NL "\n"
     #define D  "%d"
     #define DN D NL   /* #define DN "%d" "\n" */
#define 后第一个是宏标识符，后面全是其代表的东西，不管其中是否有空白字符，但必须控制在一行以内，另起一行的话，可用续行符 \
#define 宏标识符(参数列表) 字符串    #define S(a,b) (a)*(b)  //最好加括号
 
条件编译  #ifdef  &  #if  都以#else转折， 都以#endif结尾
#ifdef identifier /* #ifndef ..*/
#if expression /* if expression is true*/

利用取地址运算符&取得指针 int i = 2, *p; p = &i;
利用间接访问运算符*实现指针所指变量的存取 *p = 100; int j = *p;
       int *p; p是指针，*p是其指向的那空间（一变量）
指针以它对应类型的长度 +/- ， 即数组元素的第几个。
       指针移动， q[i], *(q+i), q++;

[辅助记忆] 优先级 ()与[]同级，均高于*
()先起作用，函数， int funP(int, int) 普通函数
* 先起作用，指针， int (*pf)(int, int) 指向函数的指针
* 先起作用，指针， int (*p)[4]  行指针，即p[][4]
[]先起作用，数组， int *p[4]   该数组中放了4个指针

函数名是函数的入口地址，函数名的值是指向函数的常量地址
int max(int,int);
int (*pf)(int,int); /* 也可以定义为 int (*pf)();pf可指向多个参数的函数*/
pf = max;
c = (*pf)(a,b); /* or directly c = pf(a,b); */
还可以将指向函数的指针作为另一函数的参数or返回值
void process(int x, int y, int (*fun)(int,int));
typedef int (*MYFUN)(int,int); MYFUN process(int i);

指向指针的指针， int j=100,*pj,**ppj; pj=&j; ppj=&pj;

main(int argc, char *argv[]); /* argc 命令名和参数的个数，argv[0]为命令名*/

void * 指针具有一般性，它们可以指向任何类型的数据；
   void * = 确定性*；不需要强制类型转换
   确定性* = (强制转换) void *;

 struct, union, enum;
struct [<结构体类型名>] {
	结构成员名列表；
}[结构变量];
struct, union 能嵌套且互相嵌套定义。
typedef struct [structName] {...} structTypeName;
  structName和structTypeName两名字可以相同，structName常可省，有structTypeName或实例化名就行了。
  实例化：struct structName S; structTypeName S;
 e.g. struct {int a; union {int b; struct {int c;float d}S; int e;}u;}t;

 结构变量名.成员名
 结构指针名->成员名
 同类型结构变量可以直接赋值，很直接 st2 = st1;
 enum weekday {sun, mon, tue..};
 enum wd {sun=7, mon=1, tue, wed...};
 enum weekday today = tue;

typedef： 先写出变量定义，将变量名换成新类型名，左边加上typedef。
    typedef int Integer; Integer a, b;


位运算  与&  或|  异或^  取反~  均是按位运算。
        a&b  a|b  a^b    ~a
   左位移 << 逻辑左移  右位移 >> {无符号数 左端补0；有符号数 正补0负补1}
	   a<<2          b>>1
位段(位域Bit-Fields)是结构体的特殊形式的成员，位段成员的类型必须是int或unsigned int类型。 位段成员的使用和普通成员一样。
struct pack_data {
	unsigned int a:3;
	unsigned int  :4; //无名位段不用
	unsigned int b:3; //单个成员长度不能超过unsigned int
}x;  //赋值不能超过范围  x.a = 3; x.b = 2;
在结构体中，普通成员和位段成员可以混合出现。
struct data {
	int a:23;
	int b;
	float c;
};

文件操作 <stdio.h> FILE *fp;
